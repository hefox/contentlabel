<?php

/**
 * Implementation of hook_form_alter().
 */
function contentlabel_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node_type']) && 'node_type_form' == $form_id) {
    drupal_add_css(drupal_get_path('module', 'contentlabel') . '/contentlabel.css');
    $form['contentlabel'] = array(
      '#type' => 'fieldset',
      '#title' => t('Content Label'),
      '#weight' => 0,
      '#collapsible' => TRUE,
      '#attributes' => array(
        'class' => 'contentlabel-fieldset'
      ),
    );

    if ($modes = module_invoke('content', 'build_modes')) {
      $options = array();
      foreach ($modes as $key => $value) {
        $options[$key] = $value['title'];
      }
    }
    else {
      $options = array(
        'teaser' => t('Teaser'),
        'full' => t('Full node')
      );
    }
    $type = $form['#node_type']->type;
    foreach($options as $key => $title) {
      $form['contentlabel']['modes']['contentlabel_mode_' . $key] = array(
        '#type' => 'checkboxes',
        '#multiple' => TRUE,
        '#title' => $title,
        '#default_value' => variable_get('contentlabel_mode_' . $key . '_' . $type, array()),
        '#options' => array(
          'inline' => t('Display before title'),
          'variable' => t('Provide as a variable'),
          'page' => t('Add onto page title'),
        ),
        '#attributes' => array(
          'class' => 'contentlabel-form-item',
        ),
      );
    }
    $form['contentlabel']['contentlabel_prefix'] = array(
      '#type' => 'textfield',
      '#title' => t('Prefix'),
      '#default_value' =>  variable_get('contentlabel_prefix_' . $type, ' '),
    );
    $form['contentlabel']['contentlabel_suffix'] = array(
      '#type' => 'textfield',
      '#title' => t('Suffix'),
      '#default_value' =>  variable_get('contentlabel_suffix_' . $type, ''),
    );
    $form['contentlabel']['contentlabel_position'] = array(
      '#type' => 'radios',
      '#title' => t('Position'),
      '#default_value' =>  variable_get('contentlabel_position_' . $type, 'before'),
      '#options' => array(
        'before' => t('Before'),
        'after' => t('After'),
      ),
    );

  }
}

/**
 * Implementation of hook_node_type().
 */
function contentlabel_node_type($op, $info) {
  switch ($op) {
    case 'delete':
      db_query("DELETE * from variable where name like 'contentlabel_%%_%s'", $info->type);
      variable_del('contentlabel_separator_'. $info->type);
      break;
  }
}


/**
 * Implementation of hook_preprocess_node().
 */
function contentlabel_preprocess_node(&$vars) {
  if ($vars['node']->build_mode === NODE_BUILD_NORMAL || $vars['node']->build_mode == NODE_BUILD_PREVIEW) {
    $context = $vars['teaser'] ? 'teaser' : 'full';
  }
  else {
    $context = $vars['node']->build_mode;
  }
  $title = filter_xss(variable_get('contentlabel_prefix_' . $vars['node']->type, ' ')) 
    . check_plain(node_get_types('name', $vars['node']->type)) 
    . filter_xss(variable_get('contentlabel_suffix_' . $vars['node']->type, ''));
  if (variable_get('contentlabel_position_' . $vars['node']->type, 'before') == 'before') {
    $title .= check_plain($vars['node']->title);
  }
  else {
    $title = check_plain($vars['node']->title) . $title;
  }
  
  $settings = variable_get('contentlabel_mode_' . $context . '_' . $vars['node']->type, array());
  if (in_array('variable', $settings)) {
      $vars['type_label'] = $title;
  }
  if (in_array('inline', $settings)) {
    $vars['title'] = $title;
  }
  $node_object = menu_get_object();
  if (!empty($node_object->nid)
    && $node_object->nid == $vars['node']->nid
    && in_array('page', $settings)
    && $vars['page'])
    {
    drupal_set_title($title);
  }
}